"use strict";var __awaiter=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))(function(r,a){function s(e){try{l(n.next(e))}catch(e){a(e)}}function c(e){try{l(n.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o(function(e){e(t)})).then(s,c)}l((n=n.apply(e,t||[])).next())})},__generator=this&&this.__generator||function(e,t){var o,n,r,a,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(a){return function(c){return function(a){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,n&&(r=2&a[0]?n.return:a[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,a[1])).done)return r;switch(n=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(r=(r=s.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{o=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};Object.defineProperty(exports,"__esModule",{value:!0});var execute_1=require("@getvim/execute"),prompt=require("prompt");console.log(""),console.log("DATABASE RESTORE"),console.log("@param backupName  // F.e: 1646678127337.dump"),console.log(" "),prompt.start(),prompt.get(["backupName"],function(e,t){return __awaiter(void 0,void 0,void 0,function(){var o,n,r,a;return __generator(this,function(s){switch(s.label){case 0:if(e)throw e;if("string"!=typeof(o=t.backupName)||!o.length)throw new Error("The backup name must be provided as an argument. F.e: npm run restore-database DUMP_NAME.dump");s.label=1;case 1:return s.trys.push([1,3,,4]),console.log(" "),console.log("1/3) Downloading the Database Backup into the pgdata-management volume..."),[4,(0,execute_1.execute)("docker exec api node dist/cli/databaseManagement.js restore ".concat(o))];case 2:return s.sent(),console.log("The Database Backup ".concat(o," was downloaded successfully.")),console.log(" "),[3,4];case 3:throw n=s.sent(),console.error("Error in task 1: ",n),n;case 4:return s.trys.push([4,6,,7]),console.log(" "),console.log("2/3) Restoring the Database Backup..."),[4,(0,execute_1.execute)("docker exec postgres docker-entrypoint.sh pg_restore --clean -U postgres -d postgres /var/lib/pgdata-management/".concat(o))];case 5:return s.sent(),console.log("The Database Backup ".concat(o," has been restored successfully.")),console.log(" "),[3,7];case 6:throw r=s.sent(),console.error("Error in task 2: ",r),r;case 7:return s.trys.push([7,9,,10]),console.log(" "),console.log("3/3) Cleaning Database Management Files..."),[4,(0,execute_1.execute)("docker exec api node dist/cli/databaseManagement.js clean")];case 8:return s.sent(),console.log("The management files have beel cleaned successfully."),console.log(" "),[3,10];case 9:throw a=s.sent(),console.error("Error in task 3: ",a),a;case 10:return[2]}})})});